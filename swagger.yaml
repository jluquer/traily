swagger: "2.0"
info:
  version: "1.0.0"
  title: "Traily"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/api"
tags:
  - name: "user"
    description: "Operations about users"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
  - name: "trail"
    description: "Operations about trails"
  - name: "trail review"
    description: "Operations about trail reviews"
  - name: "challenge"
    description: "Operations about challenges"
  - name: "comment"
    description: "Operations about comments"
schemes:
  - "http"
paths:
  /user/create:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Create user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/getAll:
    get:
      tags:
        - "user"
      summary: "Get all users"
      description: ""
      operationId: "getAllUsers"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "404":
          description: "User not found"
  /user/getOneById:
    get:
      tags:
        - "user"
      summary: "Get user by id"
      description: "This can only be done by the logged in user."
      operationId: "getUserById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
  /user/update:
    put:
      tags:
        - "user"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "id that need to be updated"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
  /user/delete:
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
  /user/follow:
    post:
      tags:
        - "user"
      summary: "Follow a user"
      description: "This can only be done by the logged in user."
      operationId: "followUser"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "header"
          description: "User id of who are you going to follow"
          required: true
          type: "integer"
      responses:
        default:
          description: "successful operation"
  /user/unfollow:
    delete:
      tags:
        - "user"
      summary: "Unfollow a user"
      description: "This can only be done by the logged in user."
      operationId: "unfollowUser"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "Follow object id"
          required: true
          type: "integer"
      responses:
        default:
          description: "successful operation"
  /user/getFollowing:
    get:
      tags:
        - "user"
      summary: "Get all users that you follow"
      description: ""
      operationId: "getFollowing"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "404":
          description: "Users not found"
  /user/getFollowers:
    get:
      tags:
        - "user"
      summary: "Get all users that follow you"
      description: ""
      operationId: "getFollowers"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "404":
          description: "Users not found"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Login to traily"
      description: "This can only be done by the logged out user."
      operationId: "login"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "header"
          description: "User email."
          required: true
          type: "integer"
        - name: "password"
          in: "header"
          description: "User password."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logout from traily"
      description: "This can only be done by the logged in user."
      operationId: "login"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "User id that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"

  /trail/create:
    post:
      tags:
        - "trail"
      summary: "Create trail"
      description: "This can only be done by the logged in user."
      operationId: "createTrail"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Create trail object"
          required: true
          schema:
            $ref: "#/definitions/Trail"
      responses:
        default:
          description: "successful operation"
  /trail/getAll:
    get:
      tags:
        - "trail"
      summary: "Get all trails"
      description: "This can only be done by the logged in user."
      operationId: "getAllTrails"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Trail"
        "404":
          description: "Trail not found"
  /trail/getOneById:
    get:
      tags:
        - "trail"
      summary: "Get trail by id"
      description: "This can only be done by the logged in user."
      operationId: "getTrailById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
  /trail/update:
    put:
      tags:
        - "trail"
      summary: "Update trail"
      description: "This can only be done by the logged in user."
      operationId: "updateTrail"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "id that need to be updated"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated trail object"
          required: true
          schema:
            $ref: "#/definitions/Trail"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Trail not found"
  /trail/delete:
    delete:
      tags:
        - "trail"
      summary: "Delete trail"
      description: "This can only be done by the logged in user."
      operationId: "deleteTrail"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Trail not found"

  /trail/review/create:
    post:
      tags:
        - "trail review"
      summary: "Create trail review"
      description: "This can only be done by the logged in user."
      operationId: "createTrailReview"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Create trail review object"
          required: true
          schema:
            $ref: "#/definitions/TrailReview"
      responses:
        default:
          description: "successful operation"
  /trail/review/getAllByTrailId:
    get:
      tags:
        - "trail review"
      summary: "Get all reviews of a trail"
      description: "This can only be done by the logged in user."
      operationId: "getAllTrailsByTrailId"
      produces:
        - "application/json"
      parameters:
        - name: "trailId"
          in: "header"
          description: "The id that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TrailReview"
        "400":
          description: "Invalid trail id supplied"
        "404":
          description: "Trail not found"
  /trail/review/update:
    put:
      tags:
        - "trail review"
      summary: "Update trail review"
      description: "This can only be done by the logged in user."
      operationId: "updateTrailReview"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "id that need to be updated"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated trail review object"
          required: true
          schema:
            $ref: "#/definitions/TrailReview"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Trail review not found"
  /trail/review/delete:
    delete:
      tags:
        - "trail review"
      summary: "Delete trail review"
      description: "This can only be done by the logged in user."
      operationId: "deleteTrailReview"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Trail review not found"

  /challenge/create:
    post:
      tags:
        - "challenge"
      summary: "Create challenge"
      description: "This can only be done by the logged in admin."
      operationId: "createChallenge"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Create challenge object"
          required: true
          schema:
            $ref: "#/definitions/Challenge"
      responses:
        default:
          description: "successful operation"
  /challenge/getAll:
    get:
      tags:
        - "challenge"
      summary: "Get all challenges"
      description: "This can only be done by the logged in admin."
      operationId: "getAllChallenges"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Challenge"
        "404":
          description: "Challenge not found"
  /challenge/getOneById:
    get:
      tags:
        - "challenge"
      summary: "Get challenge by id"
      description: "This can only be done by the logged in admin."
      operationId: "getChallengeById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Challenge"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Challenge not found"
  /challenge/update:
    put:
      tags:
        - "challenge"
      summary: "Update challenge"
      description: "This can only be done by the logged in admin."
      operationId: "updateChallenge"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "id that need to be updated"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated challenge object"
          required: true
          schema:
            $ref: "#/definitions/Challenge"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Challenge not found"
  /challenge/delete:
    delete:
      tags:
        - "challenge"
      summary: "Delete challenge"
      description: "This can only be done by the logged in admin."
      operationId: "deleteChallenge"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Challenge not found"
  /challenge/complete:
    post:
      tags:
        - "challenge"
      summary: "Complete challenge"
      description: "This can only be done by the logged in user."
      operationId: "completeChallenge"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "userId"
          type: "integer"
          description: "id of the user who completes the challenge"
          required: true
        - in: "header"
          name: "challengeId"
          type: "integer"
          description: "Challenge id that is completed"
          required: true
      responses:
        default:
          description: "successful operation"
  /challenge/getCompleted:
    get:
      tags:
        - "challenge"
      summary: "Get all challenges completed by an user"
      description: "This can only be done by the logged in user."
      operationId: "getAllChallenges"
      parameters:
        - in: "header"
          name: "userId"
          type: "integer"
          description: "id of the user who completed the challenges"
          required: true
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Challenge"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Challenge not found"

  /comment/trail/create:
    post:
      tags:
        - "comment"
      summary: "Comment a trail"
      description: "This can only be done by the logged in user."
      operationId: "commentTrail"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Create trail comment object"
          required: true
          schema:
            $ref: "#/definitions/TrailComment"
      responses:
        default:
          description: "successful operation"
  /comment/trail/getAllByTrailId:
    get:
      tags:
        - "comment"
      summary: "Get all challenge comments by challenge id"
      description: "This can only be done by the logged in user."
      operationId: "getAllByTrailId"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TrailComment"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Trail comments not found"
  /comment/trail/getOne:
    get:
      tags:
        - "comment"
      summary: "Get challenge by id"
      description: "This can only be done by the logged in user."
      operationId: "getTrailCommentById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TrailComment"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Trail comments not found"
  /comment/trail/update:
    put:
      tags:
        - "comment"
      summary: "Update trail comment"
      description: "This can only be done by the logged in user."
      operationId: "updateTrailComment"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "id that need to be updated"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated trail comment object"
          required: true
          schema:
            $ref: "#/definitions/TrailComment"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Trail not found"
  /comment/trail/delete:
    delete:
      tags:
        - "comment"
      summary: "Delete trail comment"
      description: "This can only be done by the logged in user."
      operationId: "deleteTrailComment"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Trail comment not found"
  /comment/challenge/create:
    post:
      tags:
        - "comment"
      summary: "Comment a challenge"
      description: "This can only be done by the logged in user."
      operationId: "commentChallenge"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Create challenge comment object"
          required: true
          schema:
            $ref: "#/definitions/ChallengeComment"
      responses:
        default:
          description: "successful operation"
  /comment/challenge/getAllByChallengeId:
    get:
      tags:
        - "comment"
      summary: "Get all challenge comments by challenge id"
      description: "This can only be done by the logged in user."
      operationId: "getAllByChallengeId"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ChallengeComment"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Challenge comments not found"
  /comment/challenge/getOne:
    get:
      tags:
        - "comment"
      summary: "Get challenge comment by id"
      description: "This can only be done by the logged in user."
      operationId: "getOneById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ChallengeComment"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "ChallengeComment not found"
  /comment/challenge/update:
    put:
      tags:
        - "comment"
      summary: "Update challenge comment"
      description: "This can only be done by the logged in user."
      operationId: "update"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "id that need to be updated"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated challenge comment object"
          required: true
          schema:
            $ref: "#/definitions/ChallengeComment"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Challenge not found"
  /comment/challenge/delete:
    delete:
      tags:
        - "comment"
      summary: "Delete challenge comment"
      description: "This can only be done by the logged in user."
      operationId: "delete"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "header"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Challenge comment not found"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
      type:
        type: "integer"
        format: "int32"
        enum: [0, 1]
  Challenge:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
  Activity:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      activity:
        type: "string"
  Trail:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      country:
        type: "string"
      province:
        type: "string"
      city:
        type: "string"
      difficulty:
        type: "integer"
        format: "int32"
        enum: [1, 2, 3, 4, 5]
      description:
        type: "string"
      elevationGain:
        type: "integer"
      maxElevation:
        type: "integer"
      minElevation:
        type: "integer"
      distance:
        type: "integer"
      trailFilePath:
        type: "string"
      activityId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
  TrailComment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      trailId:
        type: "integer"
        format: "int64"
      comment:
        type: "string"
  ChallengeComment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      challengeId:
        type: "integer"
        format: "int64"
      comment:
        type: "string"
  TrailReview:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      trailId:
        type: "integer"
        format: "int64"
      review:
        type: "string"
      rating:
        type: "integer"
        format: "int32"
        enum: [1, 2, 3, 4, 5]
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"